/* GATK Workflow in Cuneiform
 * Best Practices for Variant Calling with the GATK
 * Version: 0.81
 * Date: 2014-07-30
 * By Björn Groß, Jörgen Brandt
 **************************************
 * To use this workflow, replace the paths with your paths to the files and programs
 */

// TASK DEFINITIONS

// gunzip
deftask gunzip( out( File ) : gz( File ) )in bash *{
    out=reference
    gzip -d -c -S .tar.gz $gz > $out
}*

//create index for the reference and a reference dictionary
deftask indexReference( newref( File ) refdict( File ) reffai( File ) : reference( File ) ) in bash *{
    #create reference link
    newref=$reference.fasta
    ln -s $reference $newref
    # create reference dictionary and fastaindex
    refdict=$reference.dict
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/CreateSequenceDictionary.jar \
    REFERENCE=$newref OUTPUT=$refdict
    reffai=$newref.fai
    /Users/vadril/Documents/Uni/Work/GATK/samtools-0.1.19/samtools faidx $newref > $reffai
}*

//create an index file for the bam
deftask indexBam( bamindex( File ) : inputbam( File ) ) in bash *{
    bamindex=$inputbam.bai
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/BuildBamIndex.jar \
    INPUT=$inputbam OUTPUT=$bamindex
}*

// align files seperately
// the reference genom has to be index first
deftask map( sai( File ) : reference( File ) read( File ) ) in bash *{
    /Users/vadril/Documents/Uni/Work/GATK/bwa-0.7.9a/bwa index $reference
    /Users/vadril/Documents/Uni/Work/GATK/bwa-0.7.9a/bwa aln $reference $read > $sai
}*

// combine the previously aligned files
// again, the reference genom has to be index first

//eckige klammern - kein kreuzprodukt
deftask align( sam( File) : reference( File ) [fwdsai( File ) revsai( File ) fwdfq( File ) revfq( File )] ) in bash *{
    /Users/vadril/Documents/Uni/Work/GATK/bwa-0.7.9a/bwa index $reference
    /Users/vadril/Documents/Uni/Work/GATK/bwa-0.7.9a/bwa sampe $reference $fwdsai $revsai $fwdfq $revfq > $sam
}*

// Marking duplicates, first step: sort the input
//SortOrder: Sort order of output file( Required ). Possible values: {unsorted, queryname, coordinate} 
deftask sort( bam( File ) : inputsam( File ) ) in bash *{
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/SortSam.jar \
        I=$inputsam O=$bam SORT_ORDER=coordinate
}*

// Mark duplicates
//The metrics file is required and contains the duplication metrics
deftask dedup( bam( File ) : inputbam( File ) ) in bash *{
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/MarkDuplicates.jar \
        I=$inputbam O=$bam METRICS_FILE=dup_metrics.txt
}*

// Replaces all read groups in the INPUT file with a new read group and assigns all reads to this read group in the OUTPUT BAM
deftask addOrReplaceReadGroups( bam( File ) : inputbam( File ) library platform platformunit samplename) in bash *{
    bam=output.bam
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/AddOrReplaceReadGroups.jar \
        I=$inputbam O=$bam \
        RGLB=$library RGPL=$platform RGPU=$platformunit RGSM=$samplename
}*

deftask validateBam( output( File ) : inputbam( File ) ) in bash *{
    #The output file contains the status report on the input file
    java -jar /Users/vadril/Documents/Uni/Work/GATK/picard-tools-1.114/picard-tools-1.114/ValidateSamFile.jar \
        INPUT=$inputbam OUTPUT=bamValidation_report.txt
    #use the inputfile as outputfile
    ln -s $inputbam $output
}*

/*
 * Note: The GATK doesn't work with Java Version 1.8 (which i use) at the moment. If you don't have 1.7 running, 
 * you might have to give the full path to a JRE as well.
 */

deftask realignerTargetCreator( outputintervals( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    #create interval
    /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java \
    -jar /Users/vadril/Documents/Uni/Work/GATK/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar \
    -T RealignerTargetCreator -R reference.fasta -I input.bam -o $outputintervals
}*

//Must use same inputbam file used in RealignerTargetCreator step
deftask realign( outputbam( File ) :  [reference( File ) dict( File ) fai( File )] [targetintervals( File ) inputbam( File ) bami( File )] ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ln -s $targetintervals .intervals
    ####
    targetintervals=$target.intervals
    /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java \
    -jar /Users/vadril/Documents/Uni/Work/GATK/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar \
    -T IndelRealigner -R reference.fasta -I input.bam -targetIntervals $targetintervals -o $outputbam
}*

// http://www.broadinstitute.org/gatk//events/2038/GATKw1212-BP-3-Base_recalibration.pdf
// knownsites is optional and will not be used by us at the moment
deftask baseRecalibration( outputgroup( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] known( File ) ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java \
    -jar /Users/vadril/Documents/Uni/Work/GATK/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar \
    -T BaseRecalibrator -I input.bam -R reference.fasta -o $outputgroup \
    -knownSites $known
}*

deftask printReads( output( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File ) recalgroup( File )] ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java \
    -jar /Users/vadril/Documents/Uni/Work/GATK/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar \
    -T PrintReads -R reference.fasta -I input.bam -BQSR $recalgroup -o $output
}*

deftask unifyGenotyper( outputvcf( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java \
    -jar /Users/vadril/Documents/Uni/Work/GATK/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar \
    -T UnifiedGenotyper -R reference.fasta -I input.bam -o $outputvcf
}*

/* Pseudo task, used to match the input files as planned when using lists of files
 * e.g. the reference chromosom must always be matched by its own known variants file
 */
deftask analysis( vcf( File ) : [ fastq1( File ) fastq2( File ) ] [ ref-gz( File ) knownVariants( File ) ] library platform platformunit samplename ) {
    //put workflow here inside the pseudo function
    
}

// WORKFLOW INPUT FILES
fastq1 = '/Users/vadril/Documents/Uni/Work/GATK/data/SRR062634_1.filt.fastq';
fastq2 = '/Users/vadril/Documents/Uni/Work/GATK/data/SRR062634_2.filt.fastq';
/* the chr22 file needed to be changed to match the known variants. the first line 
 * >chr22 was replaced with >22
 */
ref-gz  = '/Users/vadril/Documents/Uni/Work/GATK/data/chr22_2.fa.gz' '/Users/vadril/Documents/Uni/Work/GATK/data/chr21_2.fa.gz';
//get the known variants here:
// ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp
//     /release/20110521/ALL.chr22.phase1_release_v3.20101123.snps_indels_svs.genotypes.vcf.gz
known-variants = '/Users/vadril/Documents/Uni/Work/GATK/data/ALL.chr22.phase1_release_v3.20101123.snps_indels_svs.genotypes.vcf' '/Users/vadril/Documents/Uni/Work/GATK/data/ALL.chr21.integrated_phase1_v3.20101123.snps_indels_svs.genotypes.vcf';

// Vars
lib = '2845856850';
platf = 'illumina';
platfu = 'AXL2342';
samna = 'HG00096';


// WORKFLOW DEFINITION

ref = gunzip( gz: ref-gz );

//Align seperately
sai1 = map( reference:ref read:fastq1 );
sai2 = map( reference:ref read:fastq2 );
//Combine all
sam = align( reference:ref fwdsai:sai1 revsai:sai2 fwdfq:fastq1 revfq:fastq2 );

bam = sort( inputsam:sam );
bam1 = dedup( inputbam:bam );
bam1-1 = addOrReplaceReadGroups( inputbam:bam1 library:lib  platform:platf platformunit:platfu samplename:samna );

bam2 = validateBam( inputbam:bam1-1 );

// Bindet beide Outputs, erst Kanal 1 (intervals), dann Kanal 2 (bami)
// wenn z.B. nur bami gebunden werden sollte, kann der 2.Kanal auch direkt angesprochen werden mit
// bami = [2]taskname
// Memo: 1-Indeziert
newref refdict reffai = indexReference( reference: ref );
bami = indexBam( inputbam : bam2 );

intervals = realignerTargetCreator( reference:newref inputbam:bam2 dict:refdict fai:reffai bami:bami );
bam3 = realign( reference:newref inputbam:bam2 targetintervals:intervals dict:refdict fai:reffai bami:bami);

recal = baseRecalibration( reference:newref inputbam:bam3 dict:refdict fai:reffai bami:bami known:known-variants);
bam4 = printReads( reference:newref inputbam:bam3 dict:refdict fai:reffai bami:bami recalgroup:recal );

bami2 = indexBam( inputbam: bam4 );

vcf1 = unifyGenotyper( reference:newref inputbam:bam4 dict:refdict fai:reffai bami:bami2 );

//Start the workflow
vcf1;
