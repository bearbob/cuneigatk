//***************************************
//The dummy calls are used to validate
// that the correct files are matched
// with each other the intended way
//***************************************


deftask gunzip( out : gz ) in bash *{
    out=$gz
}*

deftask bwa-idx( idx : reference )in bash *{
    idx=$reference.idx
}*

deftask indexReference( newref refdict reffai : reference ) in bash *{
    newref=$reference.fa
    refdict=$reference.dict
    reffai=$reference.fai
}*

deftask indexBam( bamindex : inputbam ) in bash *{
    bamindex=$inputbam.bai
}*

deftask map( sai : [reference indextar] read ) in bash *{
    sai=$reference$indextar$read
}*

deftask align( sam : [reference indextar ] [fwdsai  revsai  fwdfq  revfq ] ) in bash *{
    sam=$reference$indextar$fwdsai$revsai$fwdfq$revfq
}*

deftask sort( bam  : inputsam  ) in bash *{
    bam=$inputsam
}*

deftask dedup( bam  : inputbam  ) in bash *{
    bam=$inputsam
}*

deftask addOrReplaceReadGroups( bam  : inputbam  library platform platformunit samplename ) in bash *{
    bam=$inputbam$library$platform$platformunit$samplename
}*

deftask validateBam( output  : inputbam  ) in bash *{
    output=$inputbam
}*

deftask realignerTargetCreator( outputintervals  : [reference  dict  fai ] [inputbam  bami ] ) in bash *{
    outputintervals=$reference$dict$fai$inputbam$bami
}*

deftask realign( outputbam  :  [reference  dict  fai ] [targetintervals  inputbam  bami ] ) in bash *{
    outputbam=$reference$dict$fai$targetintervals$inputbam$bami
}*

deftask baseRecalibration( outputgroup : [reference dict fai known] [inputbam bami] ) in bash *{
    outputgroup=$reference$dict$fai$known$inputbam$bami
}*

deftask analysis( target  : [ fastq1  fastq2  ] [ ref  refdict  reffai  knownVariants   refindextar  ] library platform platformunit samplename ) {
    sai1 = map( reference:ref indextar:refindextar read:fastq1 );
    sai2 = map( reference:ref indextar:refindextar read:fastq2 );
    sam = align( reference:ref indextar:refindextar fwdsai:sai1 revsai:sai2 fwdfq:fastq1 revfq:fastq2 );

    bam = sort( inputsam:sam );
    bam1 = dedup( inputbam:bam );
    bam1-1 = addOrReplaceReadGroups( inputbam:bam1 library:lib  platform:platf platformunit:platfu samplename:samna );
    bam2 = validateBam( inputbam:bam1-1 );
    
    bami = indexBam( inputbam : bam2 );
    intervals = realignerTargetCreator( reference:ref inputbam:bam2 dict:refdict fai:reffai bami:bami );
    bam3 = realign( reference:ref inputbam:bam2 targetintervals:intervals dict:refdict fai:reffai bami:bami);
    
    recal = baseRecalibration( reference:ref inputbam:bam3 dict:refdict fai:reffai bami:bami known:knownVariants);
    test = sampletask(a:fastq1 b:fastq2 c:ref d:refdict e:reffai f:knownVariants g:refindextar);
    target = recal;
}

deftask sampletask(out : a b c d e f g) in bash *{
    out=$a$b$c$d$e$f$g
}*

deftask analyseReference( newref  refdict  reffai  indextar  : reference  ) {
    ref = gunzip( gz: ref-gz );
    indextar = bwa-idx( reference: ref );
    newref refdict reffai = indexReference( reference: ref );
}

deftask startWorkflow( vcf  : [ fastq1  fastq2  ] [ ref-gz  knownVariants  ] library platform platformunit samplename ) {
    ref refdict reffai indextar = analyseReference( reference: ref-gz );
    vcf = analysis( fastq1:fastq1 fastq2:fastq2 ref:ref-gz refdict:'+1' reffai:'+2' knownVariants:knownVariants refindextar:'+3' library:lib platform:platf platformunit:platfu samplename:samna );
}

// WORKFLOW INPUT FILES
fastq1 = '-fq1_1' '-fq1_2';
fastq2 = '-fq2_1' '-fq2_2';
ref-gz  = '-Chr21';// '-Chr22';
known-variants = '-KV21';// '-KV22';

// Vars
lib = '-lib';
platf = '-plat';
platfu = '-plafu';
samna = '-samna';

//Start the workflow
vcf = startWorkflow( fastq1:fastq1 fastq2:fastq2 ref-gz:ref-gz knownVariants:known-variants library:lib platform:platf platformunit:platfu samplename:samna );
vcf;
