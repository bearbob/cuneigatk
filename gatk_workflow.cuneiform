/**************************************
 * GATK Workflow in Cuneiform
 **************************************
 * Best Practices for Variant Calling with the GATK
 **************************************
 * Version: 0.81
 * Date: 2014-08-14
 * By Björn Groß, Jörgen Brandt
 **************************************
 * To use this workflow, replace the paths with your paths to the files and programs
 */


// SETUP, global vars 
bwa = 'however/you/call/bwa/from/terminal';
picard = 'however/you/call/picard/from/terminal';
gatk = 'however/you/call/GATK/from/terminal
//path to java needed if default version is 1.8 or higher, GATK is only supported for 1.7 (as of 14.8.2014)
//if 1.7 is your default, this is simply 'java'
java = '/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/bin/java';


// TASK DEFINITIONS

// gunzip
deftask gunzip( out( File ) : gz( File ) )in bash *{
    out=reference
    gzip -d -c -S .tar.gz $gz > $out
}*

deftask createIdx( idx( File ) : reference( File ) bwa )in bash *{
    idx=bwa-index.tar
    ln -s $reference reference.fasta
    $bwa index reference.fasta
    tar cf $idx reference.fasta.*
}*

deftask bwa-idx( idx( File ) : reference( File) ) {
    idx = createIdx( reference:reference bwa:bwa );
}

//create index for the reference and a reference dictionary
deftask createIndexReference( newref( File ) refdict( File ) reffai( File ) : reference( File ) picard ) in bash *{
    #create reference link
    newref=reference.fasta
    ln -s $reference $newref
    # create reference dictionary and fastaindex
    refdict=reference.dict
    java -jar $picard/CreateSequenceDictionary.jar \
    REFERENCE=$newref OUTPUT=$refdict
    reffai=reference.fasta.fai
    /Users/vadril/Documents/Uni/Work/GATK/samtools-0.1.19/samtools faidx $newref > $reffai
}*

deftask indexReference( newref( File ) refdict( File ) reffai( File ) : reference( File ) ) {
    newref refdict reffai = createIndexReference( reference:reference picard:picard );
}

deftask createIndexBam( bamindex( File ) : inputbam( File ) picard ) in bash *{
    bamindex=$inputbam.bai
    java -jar $picard/BuildBamIndex.jar \
    INPUT=$inputbam OUTPUT=$bamindex
}*

deftask indexBam( bamindex( File ) : inputbam( File ) ) in bash *{
    bamindex= createIndexBam( inputbam:inputbam picard:picard );
}*

deftask createMap( sai( File ) : [reference( File ) indextar( File )] read( File ) bwa ) in bash *{
    tar xf $indextar
    ln -s $reference reference.fasta
    $bwa aln reference.fasta $read > $sai
}*

deftask map( sai( File ) : [reference( File ) indextar( File )] read( File ) ) {
    sai = createMap( reference:reference indextar:indextar read:read bwa:bwa );
}

// combine the previously aligned files
// again, the reference genom has to be index first
deftask doAlign( sam( File) : [reference( File ) indextar( File )] [fwdsai( File ) revsai( File ) fwdfq( File ) revfq( File )] bwa ) in bash *{
    tar xf $indextar
    ln -s $reference reference.fasta
    $bwa sampe reference.fasta $fwdsai $revsai $fwdfq $revfq > $sam
}*

deftask align( sam( File) : [reference( File ) indextar( File )] [fwdsai( File ) revsai( File ) fwdfq( File ) revfq( File )] ) {
    sam = doAlign( reference:reference indextar:indextar fwdsai:fwdsai revsai:revsai fwdfq:fwdfq revfq:revfq bwa:bwa );
}

// Marking duplicates, first step: sort the input
//SortOrder: Sort order of output file( Required ). Possible values: {unsorted, queryname, coordinate} 
deftask doSort( bam( File ) : inputsam( File ) picard ) in bash *{
    java -jar $picard/SortSam.jar I=$inputsam O=$bam SORT_ORDER=coordinate
}*

deftask sort( bam( File ) : inputsam( File ) ) {
    bam = doSort( inputsam:inputsam picard:picard );
}

// Mark duplicates
//The metrics file is required and contains the duplication metrics
deftask doDedup( bam( File ) : inputbam( File ) ) in bash *{
    java -jar $picard/MarkDuplicates.jar I=$inputbam O=$bam METRICS_FILE=dup_metrics.txt
}*

deftask dedup( bam( File ) : inputbam( File ) ) {
    bam = doDedup( inputbam:inputbam picard:picard );
}

// Replaces all read groups in the INPUT file with a new read group and assigns all reads to this read group in the OUTPUT BAM
deftask doAddOrReplaceReadGroups( bam( File ) : inputbam( File ) library platform platformunit samplename picard ) in bash *{
    bam=output.bam
    java -jar $picard/AddOrReplaceReadGroups.jar I=$inputbam O=$bam \
        RGLB=$library RGPL=$platform RGPU=$platformunit RGSM=$samplename
}*
deftask addOrReplaceReadGroups( bam( File ) : inputbam( File ) library platform platformunit samplename ) {
    bam=doAddOrReplaceReadGroups( inputbam:inputbam library:library platform:platform platformunit:platformunit samplename:samplename picard:picard );
}

deftask doValidateBam( output( File ) : inputbam( File ) picard ) in bash *{
    #The output file contains the status report on the input file
    java -jar $picard/ValidateSamFile.jar INPUT=$inputbam OUTPUT=bamValidation_report.txt
    #use the inputfile as outputfile
    ln -s $inputbam $output
}*
deftask validateBam( output( File ) : inputbam( File ) ) {
    output = doValidateBam( inputbam:inputbam picard:picard );
}

deftask doRealignerTargetCreator( outputintervals( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] gatk java) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    #create interval
    $java -Xmx8g -jar $gatk/GenomeAnalysisTK.jar \
    -T RealignerTargetCreator -R reference.fasta -I input.bam -o $outputintervals
}*
deftask realignerTargetCreator( outputintervals( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] ) {
    outputintervals = doRealignerTargetCreator( reference:reference dict:dict fai:fai inputbam:inputbam bami:bami gatk:gatk );
}


//Must use same inputbam file used in RealignerTargetCreator step
deftask doRealign( outputbam( File ) :  [reference( File ) dict( File ) fai( File )] [targetintervals( File ) inputbam( File ) bami( File )] gatk java ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ln -s $targetintervals .intervals
    ####
    targetintervals=$target.intervals
    $java -Xmx8g -jar $gatk/GenomeAnalysisTK.jar \
    -T IndelRealigner -R reference.fasta -I input.bam -targetIntervals $targetintervals -o $outputbam
}*
deftask realign( outputbam( File ) :  [reference( File ) dict( File ) fai( File )] [targetintervals( File ) inputbam( File ) bami( File )] ) {
    outputbam = doRealign( reference:reference dict:dict fai:fai targetintervals:targetintervals inputbam:inputbam bami:bami java:java gatk:gatk );
}

// http://www.broadinstitute.org/gatk//events/2038/GATKw1212-BP-3-Base_recalibration.pdf
deftask doBaseRecalibration( outputgroup( File ) : [reference( File ) dict( File ) fai( File ) known( File )] [inputbam( File ) bami( File )] java gatk ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    $java -Xmx16g -jar $gatk/GenomeAnalysisTK.jar \
    -T BaseRecalibrator -I input.bam -R reference.fasta -o $outputgroup \
    -knownSites $known
}*
deftask baseRecalibration( outputgroup( File ) : [reference( File ) dict( File ) fai( File ) known( File )] [inputbam( File ) bami( File )] ) {
    outputgroup = doBaseRecalibration( reference:reference dict:dict fai:fai known:known inputbam:inputbam bami:bami java:java gatk:gatk );
}

deftask doPrintReads( output( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File ) recalgroup( File )] java gatk ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    $java -Xmx8g -jar $gatk/GenomeAnalysisTK.jar \
    -T PrintReads -R reference.fasta -I input.bam -BQSR $recalgroup -o $output
}*
deftask printReads( output( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File ) recalgroup( File )] ) {
    output = doPrintReads( reference:reference dict:dict fai:fai inputbam:inputbam bami:bami recalgroup:recalgroup java:java gatk:gatk );
}

deftask doUnifyGenotyper( outputvcf( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] dbsnp( File ) java gatk ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputbam input.bam
    ln -s $bami input.bam.bai
    ####
    $java -jar $gatk/GenomeAnalysisTK.jar \
    -T UnifiedGenotyper -R reference.fasta -I input.bam -o $outputvcf \
    --dbsnp $dbsnp
}*
deftask unifyGenotyper( outputvcf( File ) : [reference( File ) dict( File ) fai( File )] [inputbam( File ) bami( File )] dbsnp( File ) ) {
    outputvcf = doUnifyGenotyper( reference:reference dict:dict fai:fai inputbam:inputbam bami:bami dbsnp:dbsnp java:java gatk:gatk );
}


deftask doVariantAnnotator( vcf( File ) : inputVcf( File ) [bam( File ) bami( File) ] [reference( File ) dict( File ) fai( File )] dbsnp( File ) java gatk) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputVcf input.vcf
    ln -s $bam input.bam
    ln -s $bami input.bam.bai
    ####
    $java -Xmx8g -jar $gatk/GenomeAnalysisTK.jar \
   -T VariantAnnotator \
   -R reference.fasta -o $vcf \
   -A QualByDepth\
   --variant input.vcf -I input.bam\
   -L input.vcf \
   --dbsnp $dbsnp
}*
deftask variantAnnotator( vcf( File ) : inputVcf( File ) [bam( File ) bami( File) ] [reference( File ) dict( File ) fai( File )] dbsnp( File ) ) {
    vcf = doVariantAnnotator( inputVcf:inputVcf reference:reference dict:dict fai:fai bam:bam bami:bami dbsnp:dbsnp java:java gatk:gatk );
}


deftask doVariantRecalibrator( recalFile( File ) tranchesFile ( File ) : inputVcf( File ) [reference( File ) dict( File ) fai( File )] hapmap( File ) omni( File ) dbsnp( File ) java gatk ) in bash *{
    #need to create symbolic links to achieve same filenames
    ln -s $reference reference.fasta
    ln -s $dict reference.dict
    ln -s $fai reference.fasta.fai
    ln -s $inputVcf input.vcf
    ####
    #-an QD -an HaplotypeScore -an MQRankSum -an ReadPosRankSum -an FS -an MQ -an InbreedingCoeff \
    $java -Xmx8g -jar $gatk/GenomeAnalysisTK.jar \
    -T VariantRecalibrator -R reference.fasta -input input.vcf  \
    -resource:HapMap,known=false,training=true,truth=true,prior=15.0 $hapmap \
    -resource:Omni,known=false,training=true,truth=truth,prior=12.0 $omni \
    -resource:dbSNP,known=true,training=false,truth=false,prior=2.0 $dbsnp \
    -mode SNP -an QD -an MQ -an DP \
    -recalFile $recalFile -tranchesFile $tranchesFile
}*
deftask variantRecalibrator( recalFile( File ) tranchesFile ( File ) : inputVcf( File ) [reference( File ) dict( File ) fai( File )] hapmap( File ) omni( File ) dbsnp( File ) ) {
    recalFile tranchesFile = doVariantRecalibrator( inputVcf:inputVcf reference:reference dict:dict fai:fai hapmap:hapmap omni:omni dbsnp:dbsnp java:java gatk:gatk );
}

/* Pseudo task, used to match the input files as planned when using lists of files
 * e.g. the reference chromosom must always be matched by its own known variants file
 */
deftask analysis( target( File ) : [ fastq1( File ) fastq2( File ) ] [ ref( File ) refdict( File ) reffai( File ) knownVariants( File )  refindextar( File ) ] library platform platformunit samplename hapmap( File ) omni( File ) dbsnp( File ) ) {
    //Align seperately
    sai1 = map( reference:ref indextar:refindextar read:fastq1 );
    sai2 = map( reference:ref indextar:refindextar read:fastq2 );
    //Combine all
    sam = align( reference:ref indextar:refindextar fwdsai:sai1 revsai:sai2 fwdfq:fastq1 revfq:fastq2 );

    bam = sort( inputsam:sam );
    bam1 = dedup( inputbam:bam );
    bam1-1 = addOrReplaceReadGroups( inputbam:bam1 library:lib  platform:platf platformunit:platfu samplename:samna );
    bam2 = validateBam( inputbam:bam1-1 );
    
    bami = indexBam( inputbam : bam2 );
    intervals = realignerTargetCreator( reference:ref inputbam:bam2 dict:refdict fai:reffai bami:bami );
    bam3 = realign( reference:ref inputbam:bam2 targetintervals:intervals dict:refdict fai:reffai bami:bami);

    recal = baseRecalibration( reference:ref inputbam:bam3 dict:refdict fai:reffai bami:bami known:knownVariants);
    bam4 = printReads( reference:ref inputbam:bam3 dict:refdict fai:reffai bami:bami recalgroup:recal );

    bami2 = indexBam( inputbam: bam4 );

    vcf1 = unifyGenotyper( reference:ref inputbam:bam4 dict:refdict fai:reffai bami:bami2 dbsnp:dbsnp);
    vcf2 = variantAnnotator( inputVcf:vcf1 bam:bam4 bami:bami2 reference:ref dict:refdict fai:reffai dbsnp:dbsnp );
    recal2 tranches = variantRecalibrator( inputVcf:vcf2 reference:ref dict:refdict fai:reffai hapmap:hapmap omni:omni dbsnp:dbsnp);
    
    
    target = recal2;
}

deftask analyseReference( newref( File ) refdict( File ) reffai( File ) indextar( File ) : reference( File ) ) {
    ref = gunzip( gz: reference );
    indextar = bwa-idx( reference: ref );
    newref refdict reffai = indexReference( reference: ref );
}

deftask startWorkflow( vcf( File ) : [ fastq1( File ) fastq2( File ) ] [ ref-gz( File ) knownVariants( File ) ] library platform platformunit samplename hapmap( File ) omni( File ) dbsnp( File ) ) {
    ref refdict reffai indextar = analyseReference( reference: ref-gz );
    vcf = analysis( fastq1:fastq1 fastq2:fastq2 ref:ref refdict:refdict reffai:reffai knownVariants:knownVariants refindextar:indextar library:lib platform:platf platformunit:platfu samplename:samna hapmap:hapmap omni:omni dbsnp:dbsnp );
}

// WORKFLOW INPUT FILES (have to be in the same folder)
fastq1 = 'SRR062634_1.filt.fastq';
fastq2 = 'SRR062634_2.filt.fastq';

ref1-gz  = 'chr21.fa.gz' 'chr22.fa.gz';
known-variants = 'known.variants.chr21.vcf' 'known.variants.chr22.vcf';
hapmap = 'hapmap_3.3.hg19.vcf';
omni= '1000G_omni2.5.hg19.vcf';
dbsnp= 'dbsnp_138.hg19.vcf';

// Vars
lib = '2845856850';
platf = 'illumina';
platfu = 'AXL2342';
samna = 'HG00096';

//Start the workflow
vcf = startWorkflow( fastq1:fastq1 fastq2:fastq2 ref-gz:ref1-gz knownVariants:known-variants library:lib platform:platf platformunit:platfu samplename:samna hapmap:hapmap omni:omni dbsnp:dbsnp);
vcf;
